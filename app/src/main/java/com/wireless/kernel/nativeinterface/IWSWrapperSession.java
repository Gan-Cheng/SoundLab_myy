// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from common_base.djinni

package com.wireless.kernel.nativeinterface;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public interface IWSWrapperSession {
    /** 只供对象模式使用，等同于close */
    public void destroy();

    /** 适用于对象模式：IWSWrapperEngine.creatSession； */
    public String start(InitSessionConfig config, IDependsAdapter depends, IKernelSessionListener listener);

    public String getSessionId();

    /**  上层设置：前后台切换  通知事件设置 ios 端退后台后都断网了 */
    public void switchToFront();

    public void switchToBackGround();

    /** 获取底层错误日志 */
    public ArrayList<String> getCacheErrLog();

    public IKernelAudioService getAudioService();

    /**
     * 本接口从IQQNTWrapperEngine.createSession移入
     * 创建空对象 --- 需要调用 IWSWrapperSession.start(...)
     */
    public static IWSWrapperSession createSession()
    {
        return CppProxy.createSession();
    }

    /** 创建session内部自动start 无需在调用start 启动session */
    public static IWSWrapperSession create(InitSessionConfig config, IDependsAdapter depends, IKernelSessionListener listener)
    {
        return CppProxy.create(config,
                               depends,
                               listener);
    }

    static final class CppProxy implements IWSWrapperSession
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0)
            {
                throw new RuntimeException("nativeRef is zero");
            }
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed)
            {
                nativeDestroy(this.nativeRef);
            }
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void destroy()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_destroy(this.nativeRef);
        }

        private native void native_destroy(long _nativeRef);

        @Override
        public String start(InitSessionConfig config, IDependsAdapter depends, IKernelSessionListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_start(this.nativeRef, config, depends, listener);
        }

        private native String native_start(long _nativeRef, InitSessionConfig config, IDependsAdapter depends, IKernelSessionListener listener);

        @Override
        public String getSessionId()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getSessionId(this.nativeRef);
        }

        private native String native_getSessionId(long _nativeRef);

        @Override
        public void switchToFront()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_switchToFront(this.nativeRef);
        }

        private native void native_switchToFront(long _nativeRef);

        @Override
        public void switchToBackGround()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_switchToBackGround(this.nativeRef);
        }

        private native void native_switchToBackGround(long _nativeRef);

        @Override
        public ArrayList<String> getCacheErrLog()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCacheErrLog(this.nativeRef);
        }

        private native ArrayList<String> native_getCacheErrLog(long _nativeRef);

        @Override
        public IKernelAudioService getAudioService()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAudioService(this.nativeRef);
        }

        private native IKernelAudioService native_getAudioService(long _nativeRef);

        public static native IWSWrapperSession createSession();

        public static native IWSWrapperSession create(InitSessionConfig config, IDependsAdapter depends, IKernelSessionListener listener);
    }
}
