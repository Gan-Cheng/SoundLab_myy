// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from common_base.djinni

package com.wireless.kernel.nativeinterface;

import java.util.concurrent.atomic.AtomicBoolean;

public interface IWSWrapperEngine {
    /** ios swift 会被重命名为initWith 。。。 */
    public void initWithConfig(WrapperEngineGlobalConfig globalConfig, IGlobalAdapter delegate);

    public void destroy();

    public DeviceInfo getDeviceInfo();

    public static IWSWrapperEngine get()
    {
        return CppProxy.get();
    }

    static final class CppProxy implements IWSWrapperEngine
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0)
            {
                throw new RuntimeException("nativeRef is zero");
            }
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed)
            {
                nativeDestroy(this.nativeRef);
            }
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void initWithConfig(WrapperEngineGlobalConfig globalConfig, IGlobalAdapter delegate)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_initWithConfig(this.nativeRef, globalConfig, delegate);
        }

        private native void native_initWithConfig(long _nativeRef, WrapperEngineGlobalConfig globalConfig, IGlobalAdapter delegate);

        @Override
        public void destroy()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_destroy(this.nativeRef);
        }

        private native void native_destroy(long _nativeRef);

        @Override
        public DeviceInfo getDeviceInfo()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getDeviceInfo(this.nativeRef);
        }

        private native DeviceInfo native_getDeviceInfo(long _nativeRef);

        public static native IWSWrapperEngine get();
    }
}
