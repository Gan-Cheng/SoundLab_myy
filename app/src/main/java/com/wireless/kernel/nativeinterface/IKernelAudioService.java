// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from audio_service.djinni

package com.wireless.kernel.nativeinterface;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public interface IKernelAudioService {
    public long addListener(IKernelAudioListener listener);

    public void removeListener(long listenerId);

    public void setConf(AudioConf conf, boolean is3D, IOperateCallback result);

    public void calWin(boolean is3D, ArrayList<AudioBuffer> buffers, IOperateCallback result);

    public void readPcm(String path, boolean is3D, IOperateCallback result);

    public void readUltraPcm(String path, boolean needFilter, boolean isMono, IOperateCallback result);

    public void readUltraPcmRecord(String path, int chirpId, IOperateCallback result);

    public void initUltraSignalFlag(String path, IOperateCallback result);

    public void setUltraSignalFlagThre(float thre, IOperateCallback result);

    public void ultraSignalAlignment(long id, ArrayList<Short> buffer, boolean needFilter, IOperateCallback result);

    public void ultraReset(IOperateCallback result);

    public void ultraSetSpace(int space, IOperateCallback result);

    static final class CppProxy implements IKernelAudioService
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0)
            {
                throw new RuntimeException("nativeRef is zero");
            }
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed)
            {
                nativeDestroy(this.nativeRef);
            }
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public long addListener(IKernelAudioListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_addListener(this.nativeRef, listener);
        }

        private native long native_addListener(long _nativeRef, IKernelAudioListener listener);

        @Override
        public void removeListener(long listenerId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeListener(this.nativeRef, listenerId);
        }

        private native void native_removeListener(long _nativeRef, long listenerId);

        @Override
        public void setConf(AudioConf conf, boolean is3D, IOperateCallback result)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setConf(this.nativeRef, conf, is3D, result);
        }

        private native void native_setConf(long _nativeRef, AudioConf conf, boolean is3D, IOperateCallback result);

        @Override
        public void calWin(boolean is3D, ArrayList<AudioBuffer> buffers, IOperateCallback result)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_calWin(this.nativeRef, is3D, buffers, result);
        }

        private native void native_calWin(long _nativeRef, boolean is3D, ArrayList<AudioBuffer> buffers, IOperateCallback result);

        @Override
        public void readPcm(String path, boolean is3D, IOperateCallback result)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_readPcm(this.nativeRef, path, is3D, result);
        }

        private native void native_readPcm(long _nativeRef, String path, boolean is3D, IOperateCallback result);

        @Override
        public void readUltraPcm(String path, boolean needFilter, boolean isMono, IOperateCallback result)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_readUltraPcm(this.nativeRef, path, needFilter, isMono, result);
        }

        private native void native_readUltraPcm(long _nativeRef, String path, boolean needFilter, boolean isMono, IOperateCallback result);

        @Override
        public void readUltraPcmRecord(String path, int chirpId, IOperateCallback result)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_readUltraPcmRecord(this.nativeRef, path, chirpId, result);
        }

        private native void native_readUltraPcmRecord(long _nativeRef, String path, int chirpId, IOperateCallback result);

        @Override
        public void initUltraSignalFlag(String path, IOperateCallback result)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_initUltraSignalFlag(this.nativeRef, path, result);
        }

        private native void native_initUltraSignalFlag(long _nativeRef, String path, IOperateCallback result);

        @Override
        public void setUltraSignalFlagThre(float thre, IOperateCallback result)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setUltraSignalFlagThre(this.nativeRef, thre, result);
        }

        private native void native_setUltraSignalFlagThre(long _nativeRef, float thre, IOperateCallback result);

        @Override
        public void ultraSignalAlignment(long id, ArrayList<Short> buffer, boolean needFilter, IOperateCallback result)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_ultraSignalAlignment(this.nativeRef, id, buffer, needFilter, result);
        }

        private native void native_ultraSignalAlignment(long _nativeRef, long id, ArrayList<Short> buffer, boolean needFilter, IOperateCallback result);

        @Override
        public void ultraReset(IOperateCallback result)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_ultraReset(this.nativeRef, result);
        }

        private native void native_ultraReset(long _nativeRef, IOperateCallback result);

        @Override
        public void ultraSetSpace(int space, IOperateCallback result)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_ultraSetSpace(this.nativeRef, space, result);
        }

        private native void native_ultraSetSpace(long _nativeRef, int space, IOperateCallback result);
    }
}
